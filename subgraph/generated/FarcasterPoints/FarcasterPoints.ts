// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class channelAdded extends ethereum.Event {
  get params(): channelAdded__Params {
    return new channelAdded__Params(this);
  }
}

export class channelAdded__Params {
  _event: channelAdded;

  constructor(event: channelAdded) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get channelId(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class newUserAdded extends ethereum.Event {
  get params(): newUserAdded__Params {
    return new newUserAdded__Params(this);
  }
}

export class newUserAdded__Params {
  _event: newUserAdded;

  constructor(event: newUserAdded) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class pointsUpdated extends ethereum.Event {
  get params(): pointsUpdated__Params {
    return new pointsUpdated__Params(this);
  }
}

export class pointsUpdated__Params {
  _event: pointsUpdated;

  constructor(event: pointsUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get channelId(): Array<string> {
    return this._event.parameters[1].value.toStringArray();
  }

  get points(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class FarcasterPoints extends ethereum.SmartContract {
  static bind(address: Address): FarcasterPoints {
    return new FarcasterPoints("FarcasterPoints", address);
  }

  channelExists(_user: Address, _channelId: string): boolean {
    let result = super.call(
      "channelExists",
      "channelExists(address,string):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromString(_channelId),
      ],
    );

    return result[0].toBoolean();
  }

  try_channelExists(
    _user: Address,
    _channelId: string,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "channelExists",
      "channelExists(address,string):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromString(_channelId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  channelPoints(param0: Address, param1: string): BigInt {
    let result = super.call(
      "channelPoints",
      "channelPoints(address,string):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromString(param1)],
    );

    return result[0].toBigInt();
  }

  try_channelPoints(
    param0: Address,
    param1: string,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "channelPoints",
      "channelPoints(address,string):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromString(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  channels(param0: Address, param1: BigInt): string {
    let result = super.call("channels", "channels(address,uint256):(string)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1),
    ]);

    return result[0].toString();
  }

  try_channels(param0: Address, param1: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "channels",
      "channels(address,uint256):(string)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getChannelPoints(_user: Address, _channelId: string): BigInt {
    let result = super.call(
      "getChannelPoints",
      "getChannelPoints(address,string):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromString(_channelId),
      ],
    );

    return result[0].toBigInt();
  }

  try_getChannelPoints(
    _user: Address,
    _channelId: string,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getChannelPoints",
      "getChannelPoints(address,string):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromString(_channelId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChannels(_user: Address): Array<string> {
    let result = super.call("getChannels", "getChannels(address):(string[])", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toStringArray();
  }

  try_getChannels(_user: Address): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getChannels",
      "getChannels(address):(string[])",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getPoints(_user: Address, _channelId: Array<string>): Array<BigInt> {
    let result = super.call(
      "getPoints",
      "getPoints(address,string[]):(uint256[])",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromStringArray(_channelId),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_getPoints(
    _user: Address,
    _channelId: Array<string>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPoints",
      "getPoints(address,string[]):(uint256[])",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromStringArray(_channelId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getTotalChannelPoints(_channelId: string): BigInt {
    let result = super.call(
      "getTotalChannelPoints",
      "getTotalChannelPoints(string):(uint256)",
      [ethereum.Value.fromString(_channelId)],
    );

    return result[0].toBigInt();
  }

  try_getTotalChannelPoints(_channelId: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalChannelPoints",
      "getTotalChannelPoints(string):(uint256)",
      [ethereum.Value.fromString(_channelId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalChannelPoints(param0: string): BigInt {
    let result = super.call(
      "totalChannelPoints",
      "totalChannelPoints(string):(uint256)",
      [ethereum.Value.fromString(param0)],
    );

    return result[0].toBigInt();
  }

  try_totalChannelPoints(param0: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalChannelPoints",
      "totalChannelPoints(string):(uint256)",
      [ethereum.Value.fromString(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userExists(_user: Address): boolean {
    let result = super.call("userExists", "userExists(address):(bool)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBoolean();
  }

  try_userExists(_user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("userExists", "userExists(address):(bool)", [
      ethereum.Value.fromAddress(_user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  users(param0: BigInt): Address {
    let result = super.call("users", "users(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_users(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("users", "users(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddChannelCall extends ethereum.Call {
  get inputs(): AddChannelCall__Inputs {
    return new AddChannelCall__Inputs(this);
  }

  get outputs(): AddChannelCall__Outputs {
    return new AddChannelCall__Outputs(this);
  }
}

export class AddChannelCall__Inputs {
  _call: AddChannelCall;

  constructor(call: AddChannelCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _channelId(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class AddChannelCall__Outputs {
  _call: AddChannelCall;

  constructor(call: AddChannelCall) {
    this._call = call;
  }
}

export class CalculateTotalChannelPointsCall extends ethereum.Call {
  get inputs(): CalculateTotalChannelPointsCall__Inputs {
    return new CalculateTotalChannelPointsCall__Inputs(this);
  }

  get outputs(): CalculateTotalChannelPointsCall__Outputs {
    return new CalculateTotalChannelPointsCall__Outputs(this);
  }
}

export class CalculateTotalChannelPointsCall__Inputs {
  _call: CalculateTotalChannelPointsCall;

  constructor(call: CalculateTotalChannelPointsCall) {
    this._call = call;
  }

  get _channelId(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CalculateTotalChannelPointsCall__Outputs {
  _call: CalculateTotalChannelPointsCall;

  constructor(call: CalculateTotalChannelPointsCall) {
    this._call = call;
  }
}

export class UpdatePointsCall extends ethereum.Call {
  get inputs(): UpdatePointsCall__Inputs {
    return new UpdatePointsCall__Inputs(this);
  }

  get outputs(): UpdatePointsCall__Outputs {
    return new UpdatePointsCall__Outputs(this);
  }
}

export class UpdatePointsCall__Inputs {
  _call: UpdatePointsCall;

  constructor(call: UpdatePointsCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _channelId(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get _points(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UpdatePointsCall__Outputs {
  _call: UpdatePointsCall;

  constructor(call: UpdatePointsCall) {
    this._call = call;
  }
}
